"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const table_1 = require("./table");
describe('table specs', () => {
    describe('createInsertQuery function', () => {
        it('should handle single values', () => {
            expect(table_1.createInsertQuery('users', ['name'], ['jane']))
                .toBe('INSERT INTO users (name) VALUES ($1)');
        });
        it('should handle multiple values', () => {
            expect(table_1.createInsertQuery('users', ['name', 'rank'], ['jane', 'major']))
                .toBe('INSERT INTO users (name, rank) VALUES ($1, $2)');
        });
    });
    describe('createPgQuery function', () => {
        it('should call the query with params if given params', (done) => {
            const params = ['hello', 'world'];
            const qf = (q, p) => {
                expect(p).toEqual(params);
                done();
            };
            expect(table_1.createPgQuery({ query: qf }, 'hello', params));
        });
        it('should call the query without params if not given params', (done) => {
            const qf = (q, p) => {
                expect(p).toEqual(undefined);
                done();
            };
            expect(table_1.createPgQuery({ query: qf }, 'hello'));
        });
    });
    describe('createQueryStream function', () => {
        let client;
        let callbacks = {};
        const emit = (event, value) => callbacks[event].forEach(cb => cb(value));
        beforeEach(() => {
            callbacks = {};
            client = {
                query: () => ({
                    on: (event, handler) => {
                        if (!callbacks[event]) {
                            callbacks[event] = [];
                        }
                        callbacks[event].push(handler);
                    },
                }),
            };
        });
        it('should return a rejecting observable if an error event is raised', (done) => {
            table_1.createQueryStream(client, 'hello', [])
                .subscribe(() => expect('this case').toEqual(undefined), (err) => {
                expect(err instanceof Error).toEqual(true);
                done();
            }, done);
            emit('error', new Error('test passing'));
        });
        it('should return an observable that emits as expected', (done) => {
            const expectedRow = { test: 'thing' };
            table_1.createQueryStream(client, 'hello', [])
                .subscribe((row) => expect(row).toEqual(expectedRow), (err) => {
                expect(err).toEqual(undefined);
                done();
            }, done);
            emit('row', expectedRow);
            // this call validates the complete state
            emit('end', true);
        });
    });
    describe('createQueryObservable function', () => {
        let client;
        let resolve;
        let reject;
        beforeEach(() => {
            client = {
                query: () => (new Promise((p, f) => { resolve = p; reject = f; })),
            };
        });
        it('should return a rejecting observable if client\'s query rejects', (done) => {
            table_1.createQueryObservable(client, 'hello', [])
                .subscribe(() => expect('this case should not happen').toEqual(undefined), (err) => {
                expect(err instanceof Error).toEqual(true);
                done();
            }, done);
            reject(new Error('fail case'));
        });
        it('should trigger an observable if client\'s query resolves', (done) => {
            const expectedThing = { test: 'hello' };
            table_1.createQueryObservable(client, 'hello', [])
                .subscribe((thing) => expect(thing).toEqual(expectedThing), (err) => {
                expect(err).toEqual(undefined);
                done();
            }, done);
            resolve(expectedThing);
        });
    });
    describe('createReduceCompoundInsertOrSelectResults function', () => {
        it('should throw if there are any errors', () => {
            expect(() => table_1.createReduceCompoundInsertOrSelectResults(['col1', 'col2'])([[], []])).toThrowError();
        });
        it('should return a list of ids if everything is good', () => {
            expect(table_1.createReduceCompoundInsertOrSelectResults(['col1', 'col2'])([[{ id: 1 }], [{ id: 2 }]])).toEqual([1, 2]);
        });
    });
    describe('getClientFrom function', () => {
        let pool;
        let poolCallback;
        beforeEach(() => {
            pool = () => ({
                connect: (callback) => {
                    poolCallback = callback;
                },
            });
        });
        it('should error if the callback gets an error', (done) => {
            table_1.getClientFrom(pool)
                .subscribe(() => {
                expect('this case should not happen').toEqual(undefined);
            }, (err) => {
                expect(err instanceof Error).toEqual(true);
                done();
            }, done);
            poolCallback(new Error('test passed!'));
        });
        it('should emit a client if everything is good', (done) => {
            const expectedThing = { type: 'client technically' };
            table_1.getClientFrom(pool)
                .subscribe((thing) => {
                expect(thing).toEqual(expectedThing);
            }, (err) => {
                expect('this case should not happen').toEqual(undefined);
                done();
            }, done);
            poolCallback(null, expectedThing);
        });
    });
    describe('hasQueryError', () => {
        it('should return state if state is >= 0', () => {
            expect(table_1.hasQueryError(0, [], 7)).toEqual(0);
        });
        it('should return index if state is -1 and element has no length', () => {
            expect(table_1.hasQueryError(-1, [], 7)).toEqual(7);
        });
        it('should return -1 if state is -1 and element has length', () => {
            expect(table_1.hasQueryError(-1, [{}], 7)).toEqual(-1);
        });
    });
    describe('isValidResult function', () => {
        it('should return false if the result object is falsey', () => {
            expect(table_1.isValidResult(undefined)).toEqual(false);
        });
        it('should return false if there is no rows object', () => {
            expect(table_1.isValidResult({})).toEqual(false);
        });
        it('should return false if the rows object is not an array', () => {
            expect(table_1.isValidResult({ rows: {} })).toEqual(false);
        });
        it('should return false if the rows object is an empty array', () => {
            expect(table_1.isValidResult({ rows: [] })).toEqual(false);
        });
        it('should return true if the rows object is an array with length', () => {
            expect(table_1.isValidResult({ rows: [{}] })).toEqual(true);
        });
    });
    describe('reduceByKeys function', () => {
        it('if a set of keys contains index return state with that column', () => {
            expect(table_1.reduceByKeys([5])([], 'hello', 5)).toEqual(['hello']);
        });
        it('if a set of keys does not contain an index return state', () => {
            expect(table_1.reduceByKeys([5])([], 'hello', 3)).toEqual([]);
        });
    });
    describe('validatePropValsForInput function', () => {
        it('should handle an existing case', () => {
            const expected = {
                cols: ['name'],
                vals: ['jane'],
            };
            const result = table_1.validatePropValsForInput({
                name: { type: 'String' },
            }, ['name'], ['jane']);
            expect(result).toEqual(expected);
        });
        it('should handle two existing cases', () => {
            const expected = {
                cols: ['name', 'rank'],
                vals: ['jane', 'major'],
            };
            const result = table_1.validatePropValsForInput({
                name: { type: 'String' },
                rank: { type: 'String' },
            }, ['name', 'rank'], ['jane', 'major']);
            expect(result).toEqual(expected);
        });
        it('should skip non existing cases', () => {
            const expected = {
                cols: ['name'],
                vals: ['jane'],
            };
            const result = table_1.validatePropValsForInput({
                name: { type: 'String' },
            }, ['name', 'rank'], ['jane', 'major']);
            expect(result).toEqual(expected);
        });
    });
});
//# sourceMappingURL=table.spec.js.map