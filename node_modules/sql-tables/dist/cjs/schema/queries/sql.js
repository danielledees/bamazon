"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_connect_1 = require("../../db-connect");
const util_1 = require("../../util");
require("rxjs/add/operator/toArray");
exports.listTables = (query) => query(`
  SELECT table_name 
    FROM information_schema.tables 
    WHERE table_type = 'BASE TABLE' 
      AND table_schema = 'public' 
      AND table_catalog = $1
    ORDER BY table_type, table_name
`, [db_connect_1.dbName]);
exports.listColumns = (query, table) => query(`
  SELECT column_name
    FROM information_schema.columns
    WHERE table_schema = $1
      AND table_name   = $2
`, [db_connect_1.dbName, util_1.toString(table)]);
exports.listAllColumns = (query) => query(`
  SELECT column_name, table_name, data_type, character_maximum_length, 
    is_nullable, numeric_precision
    FROM information_schema.columns
    WHERE table_schema = 'public' AND table_catalog = $1
`, [db_connect_1.dbName]);
exports.createTable = 
/** note I don't feel great about not escaping this :/ but it's not supported */
(query, tableName, columnsAndConstraints) => {
    const q = `CREATE TABLE ${tableName} (${columnsAndConstraints.join(', ').trim()});`;
    return query(q)
        .toArray();
};
exports.varChar = (size) => `varchar(${size})`;
exports.foreignKey = (column, key) => `REFERENCES ${column} (${key})`;
exports.unique = (columns) => `UNIQUE(${columns.join(', ')})`;
exports.primaryKey = (columns) => `PRIMARY KEY(${columns.join(', ')})`;
exports.foreignKeyComposite = (columns, references, otherTable) => {
    if (columns.length !== references.length) {
        throw new Error('foreignKeyComposite column/reference mismatch');
    }
    return `FOREIGN KEY (${columns.join(', ')}) REFERENCES ${otherTable} ` +
        `(${references.join(', ')})`;
};
exports.alterTable = (table) => `ALTER TABLE ${table}`;
exports.addColumn = (table) => `${exports.alterTable(table)} ADD COLUMN`;
exports.alterColumn = (table, column) => `${exports.alterTable(table)} ALTER COLUMN ${column}`;
exports.setNull = (table, column) => `${exports.alterColumn(table, column)} DROP NOT NULL`;
exports.setNotNull = (table, column) => `${exports.alterColumn(table, column)} SET NOT NULL`;
//# sourceMappingURL=sql.js.map