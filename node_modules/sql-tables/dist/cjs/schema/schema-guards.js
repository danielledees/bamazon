"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
exports.schemeNumeric = Object.freeze({
    Decimal: true,
    Int8: true,
    Int16: true,
    Int32: true,
    Int64: true,
    UInt8: true,
    UInt16: true,
    UInt32: true,
    UInt64: true,
    TimestampMs: true,
    TimestampS: true,
});
exports.schemaNonNumeric = Object.freeze({
    Boolean: true,
    Date: true,
    Ipv4: true,
    String: true,
});
function isSchemaNonNumeric(input) {
    return exports.schemaNonNumeric[input] || false;
}
exports.isSchemaNonNumeric = isSchemaNonNumeric;
function isSchemaStructFn(fn, arg) {
    if (!util_1.isObject(arg)) {
        return false;
    }
    let result = true;
    for (let i in arg) {
        if (arg.hasOwnProperty(i)) {
            if (!result) {
                break;
            }
            if (!fn(arg[i])) {
                result = false;
                break;
            }
        }
    }
    return result;
}
exports.isSchemaStructFn = isSchemaStructFn;
function isSchemaStruct(arg) {
    return isSchemaStructFn(isSchemaStructItem, arg);
}
exports.isSchemaStruct = isSchemaStruct;
function isSchemaStructStrict(arg) {
    return isSchemaStructFn(isSchemaStructProp, arg);
}
exports.isSchemaStructStrict = isSchemaStructStrict;
function hasConstraints(input) {
    if (isSchemaStructProp(input)) {
        if (Array.isArray(input.constraints) && input.constraints.length) {
            return true;
        }
        return false;
    }
    return false;
}
exports.hasConstraints = hasConstraints;
function hasConstraint(constraint, prop) {
    if (prop.constraints && prop.constraints.length) {
        const index = prop.constraints.indexOf(constraint);
        if (index === -1) {
            if (constraint === 'NotNull') {
                return hasConstraint('PrimaryKey', prop);
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    }
    return false;
}
exports.hasConstraint = hasConstraint;
function hasDbOnlyConstraints(prop) {
    if (hasConstraint('DbModifyOnly', prop) ||
        hasConstraint('DbInternal', prop)) {
        return true;
    }
    return false;
}
exports.hasDbOnlyConstraints = hasDbOnlyConstraints;
function isSchemaNumeric(input) {
    return exports.schemeNumeric[input] === true;
}
exports.isSchemaNumeric = isSchemaNumeric;
function isSchemaType(input) {
    return isSchemaNumeric(input) || isSchemaNonNumeric(input);
}
exports.isSchemaType = isSchemaType;
function isSchemaStructProp(arg) {
    if (arg && arg.type) {
        return true;
    }
    return false;
}
exports.isSchemaStructProp = isSchemaStructProp;
function isSchemaStructItem(arg) {
    return isSchemaStructProp(arg) || isSchemaType(arg);
}
exports.isSchemaStructItem = isSchemaStructItem;
function isSchemaProp(arg) {
    if (arg && isSchemaStruct(arg.struct)) {
        return true;
    }
    return false;
}
exports.isSchemaProp = isSchemaProp;
function isSchemaRelationComposite(arg) {
    if (!Array.isArray(arg.props)) {
        return false;
    }
    if (!Array.isArray(arg.propsForeign)) {
        return false;
    }
    if (typeof arg.struct !== 'string') {
        return false;
    }
    if (arg.props.length === arg.propsForeign.length) {
        return true;
    }
    return false;
}
exports.isSchemaRelationComposite = isSchemaRelationComposite;
//# sourceMappingURL=schema-guards.js.map