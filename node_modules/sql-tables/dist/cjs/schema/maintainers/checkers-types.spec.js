"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("../schema");
const checkers_types_1 = require("./checkers-types");
describe('Schema Maintainer type checking functions', () => {
    describe('compareNullConstraints function', () => {
        it('should return null if db and code match', () => {
            expect(checkers_types_1.compareNullConstraints({
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'YES',
                data_type: 'varchar',
                character_maximum_length: 25,
                numeric_precision: 0,
            }, [])).toBe(null);
        });
        it('should return null if db and code match (inverse)', () => {
            expect(checkers_types_1.compareNullConstraints({
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'NO',
                data_type: 'varchar',
                character_maximum_length: 25,
                numeric_precision: 0,
            }, ['NotNull'])).toBe(null);
        });
        it('should return a SchemaValidation if db is nullable and code is not', () => {
            expect(checkers_types_1.compareNullConstraints({
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'YES',
                data_type: 'varchar',
                character_maximum_length: 25,
                numeric_precision: 0,
            }, ['NotNull'])).not.toBe(null);
        });
        it('should return a SchemaValidation if db is not nullable and code is', () => {
            expect(checkers_types_1.compareNullConstraints({
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'NO',
                data_type: 'varchar',
                character_maximum_length: 25,
                numeric_precision: 0,
            }, [])).not.toBe(null);
        });
    });
    describe('validateSchemaRelations', () => {
        it('should pass a simple test case', () => {
            const passing = {
                table_a: {
                    table_b_id: {
                        relation: { prop: 'id', struct: 'table_b' },
                        type: 'UInt8',
                    },
                },
                table_b: {
                    id: 'UInt8',
                },
            };
            expect(checkers_types_1.validateSchemaRelations(passing)).toBe('');
        });
        it('should fail a simple type mismatch case', () => {
            const passing = {
                table_a: {
                    table_b_id: {
                        relation: { prop: 'id', struct: 'table_b' },
                        type: 'UInt8',
                    },
                },
                table_b: {
                    id: 'UInt16',
                },
            };
            expect(checkers_types_1.validateSchemaRelations(passing)).not.toBe('');
        });
        it('should fail a simple missing relationship case', () => {
            const passing = {
                table_a: {
                    table_b_id: {
                        relation: { prop: 'id', struct: 'table_b' },
                        type: 'UInt8',
                    },
                },
            };
            expect(checkers_types_1.validateSchemaRelations(passing)).not.toBe('');
        });
    });
    describe('createColumnName function', () => {
        it('should return a "dot joined" string', () => {
            expect(checkers_types_1.createColumnName('foo', 'bar')).toBe('foo.bar');
        });
    });
    describe('compareTypes function', () => {
        it('should return null if types match, including constraints', () => {
            expect(checkers_types_1.compareTypes('String', {
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'YES',
                data_type: 'varchar',
                character_maximum_length: 25,
                numeric_precision: 0,
            }, ['NotNull'])).not.toBe(null);
        });
        it('should return a TypeMismatch if types mismatch', () => {
            expect(checkers_types_1.compareTypes('String', {
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'YES',
                data_type: 'integer',
                character_maximum_length: 25,
                numeric_precision: 0,
            }, ['NotNull']).reason).toBe(schema_1.TypeMismatch);
        });
        it('should return a NotInCode if it does not have a type mapping', () => {
            expect(checkers_types_1.compareTypes('String', {
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'YES',
                data_type: 'barf',
                character_maximum_length: 25,
                numeric_precision: 0,
            }, ['NotNull']).reason).toBe(schema_1.NotInCode);
        });
    });
    describe('typeCheckColumn function', () => {
        it('should return a container with a validation error if there is a ' +
            'validation error', () => {
            expect(checkers_types_1.typeCheckColumn({
                type: 'String',
            }, {
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'YES',
                data_type: 'barf',
                character_maximum_length: 25,
                numeric_precision: 0,
            }).error).not.toBe(undefined);
        });
        it('should return a container with no validation error if there is no ' +
            'validation error', () => {
            expect(checkers_types_1.typeCheckColumn({
                type: 'String',
            }, {
                column_name: 'some-column',
                table_name: 'some-table',
                is_nullable: 'YES',
                data_type: 'varchar',
                character_maximum_length: 25,
                numeric_precision: 0,
            }).error).not.toBe(undefined);
        });
    });
    describe('findRelation function', () => {
        it('should return an empty string if correct relation is found', () => {
            expect(checkers_types_1.findRelation({
                'some-table': {
                    struct: {
                        'some-column': {
                            type: 'String',
                        },
                    },
                },
            }, { prop: 'some-column', struct: 'some-table' }, 'String')).toBe('');
        });
        it('should return an error string if column is not found', () => {
            expect(checkers_types_1.findRelation({
                'some-table': {
                    struct: {},
                },
            }, { prop: 'some-column', struct: 'some-table' }, 'String'))
                .not.toBe('');
        });
        it('should return an error string if table is not found', () => {
            expect(checkers_types_1.findRelation({}, { prop: 'some-column', struct: 'some-table' }, 'String')).not.toBe('');
        });
    });
});
//# sourceMappingURL=checkers-types.spec.js.map