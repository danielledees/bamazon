import { Observable } from 'rxjs/Observable';
import { Schema, SchemaItem, SchemaStrict, SchemaStruct, SchemaStructItem, SchemaStructStrict, SchemaConstraint, SchemaPropStrict, SchemaStructProp, SchemaType } from '../schema';
import { QueryStream } from '../../table';
import { Dictionary } from '../../util';
export declare function createColumn(query: QueryStream<any>, table: string, column: string, prop: SchemaStructProp): Observable<any>;
export declare function setColumnNullConstraint(query: QueryStream<any>, table: string, column: string, prop: SchemaStructProp): Observable<any>;
export declare function createAutomaticColumnNameType(name: string, type: SchemaType): string;
export declare function createColumnFromProp(name: string, prop: SchemaStructProp): string;
export declare function createTableFromStruct(query: QueryStream<any>, name: string, s: SchemaPropStrict): Observable<any>;
export declare function createCompositeConstraints(scProp: SchemaPropStrict): string[];
export declare function createCompositeUnique(scProp: SchemaPropStrict): string[];
export declare function createCompositeForeignKey(scProp: SchemaPropStrict): string[];
export declare function createCompositePrimaryKey(scProp: SchemaPropStrict): string;
export declare function createConstraints(item: SchemaStructProp): any;
export declare function createReferences(item: SchemaStructProp): string;
export declare function createDefault(prop: SchemaStructProp): string;
export declare function isConstraint(constraint: SchemaConstraint, item: SchemaStructProp): boolean;
export declare const isAutomatic: (...args: any[]) => (item: SchemaStructProp) => boolean;
export interface StructContainer {
    name: string;
    scProp: SchemaPropStrict;
}
export interface CircularDepStore {
    result: StructContainer[];
    checked: Dictionary<boolean>;
    ancestors: string[];
}
export declare function orderDependencies(schema: SchemaStrict): any[];
export declare type SchemaIterator = (state: CircularDepStore, scProp: SchemaPropStrict, key: string) => CircularDepStore;
export declare function createCrIterator(schema: SchemaStrict): (state: CircularDepStore, scProp: SchemaPropStrict, key: string) => CircularDepStore;
export declare function createStructIterator(schema: SchemaStrict, schemaIterator: SchemaIterator, key: string): (state: CircularDepStore, item: SchemaStructProp) => CircularDepStore;
export declare function strictifySchemaStructItem(scItem: SchemaStructItem): SchemaStructProp;
export declare function strictifySchemaStruct(struct: SchemaStruct): SchemaStructStrict;
export declare function strictifySchemaItem(scProp: SchemaItem): SchemaPropStrict;
export declare function strictify(schema: Schema): SchemaStrict;
export declare function mutateStructIntoSchemaStructs(s: SchemaStruct, schema: Schema): Schema;
