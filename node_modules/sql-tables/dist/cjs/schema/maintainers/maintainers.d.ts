import { Observable } from 'rxjs';
import 'rxjs/operator/concat';
import { SchemaStrict, SchemaValidation, SchemaValidationCollection } from '../schema';
import { StructContainer } from './fixer-functions';
import { QueryStream } from '../../table';
export { mutateStructIntoSchemaStructs } from './fixer-functions';
export declare function validateDatabase(query: QueryStream<any>, schema: SchemaStrict): Observable<SchemaValidation[]>;
export declare function filterSchemaByTableValidations(schema: SchemaStrict, svc: SchemaValidationCollection): SchemaStrict;
export interface ValidationFixContainer {
    fixes: Observable<any>[];
    validations: SchemaValidation[];
}
export declare function orderedSchemaFromValidations(schema: SchemaStrict, validations: SchemaValidation[]): StructContainer[];
export interface FixControls {
    additive?: boolean;
    codeToDbNotNull?: boolean;
    codeToDbNull?: boolean;
}
export declare type createValidationMapper = (query: QueryStream<any>, schema: SchemaStrict) => (arg: SchemaValidation) => Observable<any>;
export declare function generateFixes(query: QueryStream<any>, schema: SchemaStrict, validations: SchemaValidation[], filterValidations: (arg: any) => Boolean, createValidationMapper: createValidationMapper): ValidationFixContainer;
export declare function nullFixMapper(query: QueryStream<any>, schema: SchemaStrict): (sv: SchemaValidation) => Observable<any>;
export declare function columnAddMapper(query: QueryStream<any>, schema: SchemaStrict): (sv: SchemaValidation) => Observable<any>;
export declare function createNotNullFilter(fixControls: FixControls): (sv: SchemaValidation) => boolean;
export declare function addNotNull(query: QueryStream<any>, schema: SchemaStrict, validations: SchemaValidation[], fixControls: FixControls): ValidationFixContainer;
export declare function addColumns(query: QueryStream<any>, schema: SchemaStrict, validations: SchemaValidation[]): ValidationFixContainer;
export declare const mapValidationTableNotInDb: (sv: SchemaValidation) => string;
/**
 * @todo refactor to match addColumn/notNull, interesting due to sort
 * constraints, in theory though we'll need sort constraints on columns :/
 */
export declare function addTables(query: QueryStream<any>, schema: SchemaStrict, validations: SchemaValidation[]): ValidationFixContainer;
export declare function fixValidations(query: QueryStream<any>, schema: SchemaStrict, fixControls: FixControls): (validations: SchemaValidation[]) => ValidationFixContainer;
export declare function validateAndFixDatabase(query: QueryStream<any>, schema: SchemaStrict, fixControls?: FixControls): Observable<SchemaValidation[]>;
