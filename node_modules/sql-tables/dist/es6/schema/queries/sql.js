import { dbName } from '../../db-connect';
import { toString } from '../../util';
import 'rxjs/add/operator/toArray';
export const listTables = (query) => query(`
  SELECT table_name 
    FROM information_schema.tables 
    WHERE table_type = 'BASE TABLE' 
      AND table_schema = 'public' 
      AND table_catalog = $1
    ORDER BY table_type, table_name
`, [dbName]);
export const listColumns = (query, table) => query(`
  SELECT column_name
    FROM information_schema.columns
    WHERE table_schema = $1
      AND table_name   = $2
`, [dbName, toString(table)]);
export const listAllColumns = (query) => query(`
  SELECT column_name, table_name, data_type, character_maximum_length, 
    is_nullable, numeric_precision
    FROM information_schema.columns
    WHERE table_schema = 'public' AND table_catalog = $1
`, [dbName]);
export const createTable = 
/** note I don't feel great about not escaping this :/ but it's not supported */
(query, tableName, columnsAndConstraints) => {
    const q = `CREATE TABLE ${tableName} (${columnsAndConstraints.join(', ').trim()});`;
    return query(q)
        .toArray();
};
export const varChar = (size) => `varchar(${size})`;
export const foreignKey = (column, key) => `REFERENCES ${column} (${key})`;
export const unique = (columns) => `UNIQUE(${columns.join(', ')})`;
export const primaryKey = (columns) => `PRIMARY KEY(${columns.join(', ')})`;
export const foreignKeyComposite = (columns, references, otherTable) => {
    if (columns.length !== references.length) {
        throw new Error('foreignKeyComposite column/reference mismatch');
    }
    return `FOREIGN KEY (${columns.join(', ')}) REFERENCES ${otherTable} ` +
        `(${references.join(', ')})`;
};
export const alterTable = (table) => `ALTER TABLE ${table}`;
export const addColumn = (table) => `${alterTable(table)} ADD COLUMN`;
export const alterColumn = (table, column) => `${alterTable(table)} ALTER COLUMN ${column}`;
export const setNull = (table, column) => `${alterColumn(table, column)} DROP NOT NULL`;
export const setNotNull = (table, column) => `${alterColumn(table, column)} SET NOT NULL`;
//# sourceMappingURL=sql.js.map