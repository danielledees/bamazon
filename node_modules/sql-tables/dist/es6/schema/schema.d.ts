import { Dictionary } from '../util';
export declare type SchemaNumeric = 'Decimal' | 'Int8' | 'Int16' | 'Int32' | 'Int64' | 'UInt8' | 'UInt16' | 'UInt32' | 'UInt64' | 'TimestampMs' | 'TimestampS';
export declare type SchemaNonNumeric = 'Boolean' | 'Date' | 'Ipv4' | 'String';
export declare type SchemaType = SchemaNonNumeric | SchemaNumeric;
export declare type SchemaConstraint = 'Automatic' | 'Check' | 'DbModifyOnly' | 'DbInternal' | 'EncryptAppLayer' | 'EncryptDbLayer' | 'NotNull' | 'PrimaryKey' | 'Unique';
export interface SchemaRelation {
    prop: string;
    struct: string;
}
export interface SchemaRelationComposite {
    props: string[];
    propsForeign: string[];
    struct: string;
}
export interface SchemaStructProp {
    constraints?: SchemaConstraint[];
    defaultValue?: any;
    relation?: SchemaRelation;
    type: SchemaType;
    typeMax?: number;
    typeMin?: number;
}
export declare type SchemaItem = SchemaProp | SchemaStruct;
export declare type SchemaStructItem = SchemaStructProp | SchemaType;
export declare type SchemaStruct = Dictionary<SchemaStructItem>;
export declare type SchemaStructStrict = Dictionary<SchemaStructProp>;
export interface SchemaProp {
    struct: SchemaStruct;
    unique?: string[][];
    primaryKey?: string[];
    foreignKey?: SchemaRelationComposite[];
}
export interface SchemaPropStrict extends SchemaProp {
    struct: SchemaStructStrict;
}
export declare type Schema = Dictionary<SchemaItem>;
export declare type SchemaStrict = Dictionary<SchemaPropStrict>;
export declare type SchemaErr = {
    count: number;
    string: string;
};
export declare type Reasons = 'not in db' | 'not in code' | 'type mismatch' | 'constraint';
export declare const NotInCode = "not in code";
export declare const NotInDb = "not in db";
export declare const TypeMismatch = "type mismatch";
export declare const Constraint = "constraint";
export declare type SchemaValidationExtra = 'src: NULL code: NOT NULL' | 'src: NOT NULL code: NULL';
export interface SchemaValidation {
    type: 'table' | 'column' | 'type';
    name: string;
    reason: Reasons;
    extra?: SchemaValidationExtra | string;
}
export interface SchemaValidationContainer {
    error: SchemaValidation;
    name: string;
}
export interface SchemaValidationCollection {
    errors: SchemaValidation[];
    names: string[];
}
export { strictify } from './maintainers/fixer-functions';
export { mutateStructIntoSchemaStructs, validateDatabase, validateAndFixDatabase } from './maintainers/maintainers';
